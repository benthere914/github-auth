{"version":3,"sources":["firebase/firebase.js","components/home/index.js","App.js","index.js"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","auth","getAuth","Home","history","useHistory","message","setMessage","useState","repoName","setRepoName","token","setToken","created","setCreated","useEffect","location","pathname","slice","createRepo","async","output","axios","post","JSON","stringify","status","handlerGitHubLogin","result","provider","GithubAuthProvider","addScope","signInWithPopup","credentialFromResult","accessToken","gitHubLogin","Alert","className","Heading","value","onChange","e","target","Button","variant","size","style","width","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAgBYA,YAVW,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,8CAMMC,I,gDCVf,MAAMC,EAAOC,cAuFEC,MArFF,KACT,MAAMC,EAAUC,eACTC,EAASC,GAAcC,mBAAS,KAChCC,EAAUC,GAAeF,mBAAS,KAClCG,EAAOC,GAAYJ,mBAAS,KAC5BK,EAASC,GAAcN,oBAAS,GAEvCO,qBAAU,KACNL,EAAYN,EAAQY,SAASC,SAASC,MAAM,MAC7C,IAEH,MASMC,EAAaC,UACf,MAAMC,QAAeC,IAAMC,KACvB,oCACAC,KAAKC,UAAU,CAAC,KAAQhB,IACxB,CAAC,QAAW,CAAC,cAAgB,SAAhB,OAA0BE,MACpB,OAAb,OAANU,QAAM,IAANA,OAAA,EAAAA,EAAQK,SACRnB,EAAW,IACXO,GAAW,IAGXP,EAAW,0CAIboB,EAAqBP,UACvB,MAAMQ,OAxBUR,WAChB,MAAMS,EAAW,IAAIC,IACrBD,EAASE,SAAS,eAClB,MAAMH,QAAeI,YAAgB/B,EAAM4B,GAG3C,OAFmBC,IAAmBG,qBAAqBL,GAClCM,aAmBJC,GACrBvB,EAASgB,IAEb,OACI,mCACA,cAACQ,EAAA,EAAD,CAAOC,UAAU,cAAjB,SACM1B,EAKGA,IAAUE,EACX,qCACI,cAACuB,EAAA,EAAME,QAAP,0BACA,6BAAKhC,IACL,gCACI,uBAAOiC,MAAO9B,EAAU+B,SAAWC,IAAO/B,EAAY+B,EAAEC,OAAOH,UAC/D,cAACI,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,MAAO,CAACC,MAAO,KAAMC,QAAS,KAAO7B,KAAzE,+BAIR,mCACI,cAACiB,EAAA,EAAME,QAAP,UACI,+BAAK7B,EAAL,kFAhBR,qCACI,cAAC2B,EAAA,EAAME,QAAP,qBACA,cAACK,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,MAAO,CAACC,MAAO,KAAMC,QAAS,KAAOrB,KAAzE,uCCtCLsB,MAZf,WACC,OACC,cAAC,IAAD,UACC,cAAC,IAAD,UACa,cAAC,IAAD,UACI,cAAC,EAAD,WCHpBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAENC,SAASC,eAAe,W","file":"static/js/main.97749df2.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCnrtZhm-00G94LSR5Vsw-IkKYmMYXpndE\",\n  authDomain: \"githubauth-b08f5.firebaseapp.com\",\n  projectId: \"githubauth-b08f5\",\n  storageBucket: \"githubauth-b08f5.appspot.com\",\n  messagingSenderId: \"140918809168\",\n  appId: \"1:140918809168:web:add0d40725068fd9bde755\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\nexport default app\n","import './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport '../../firebase/firebase.js'\nimport { Alert, Button } from 'react-bootstrap'\nimport { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport {signInWithPopup, getAuth, GithubAuthProvider} from 'firebase/auth';\nimport axios from 'axios';\nconst auth = getAuth();\n\nconst Home = () => {\n    const history = useHistory();\n    const [message, setMessage] = useState('');\n    const [repoName, setRepoName] = useState('');\n    const [token, setToken] = useState('');\n    const [created, setCreated] = useState(false)\n\n    useEffect(() => {\n        setRepoName(history.location.pathname.slice(1))\n    }, [])\n\n    const gitHubLogin = async () => {\n        const provider = new GithubAuthProvider();\n        provider.addScope('public_repo')\n        const result = await signInWithPopup(auth, provider);\n        const credential = GithubAuthProvider.credentialFromResult(result)\n        const token = credential.accessToken\n        return token\n    }\n\n    const createRepo = async () => {\n        const output = await axios.post(\n            'https://api.github.com/user/repos',\n            JSON.stringify({\"name\": repoName}),\n            {\"headers\": {\"Authorization\": `token ${token}`}})\n        if (output?.status === 201) {\n            setMessage(\"\")\n            setCreated(true)\n        }\n        else {\n            setMessage(\"There was an error. Please try again.\")\n        }\n    }\n\n    const handlerGitHubLogin = async () => {\n        const result = await gitHubLogin(repoName)\n        setToken(result)\n    }\n    return (\n        <>\n        <Alert className='mainDisplay'>\n            {!token ? (\n                <>\n                    <Alert.Heading>Log In</Alert.Heading>\n                    <Button variant='primary' size='lg' style={{width: 450}} onClick={() => {handlerGitHubLogin()}}>Login With GitHub</Button>\n                </>\n            ) : (token && !created) ?  (\n                <>\n                    <Alert.Heading>Create Repo</Alert.Heading>\n                    <h1>{message}</h1>\n                    <div>\n                        <input value={repoName} onChange={(e) => {setRepoName(e.target.value)}}></input>\n                        <Button variant='primary' size='lg' style={{width: 450}} onClick={() => {createRepo()}}>Create Repo</Button>\n                    </div>\n                </>\n            ) : (\n                <>\n                    <Alert.Heading>\n                        <h1>{repoName} was created successfully. You can close this window and resume the CLI.</h1>\n                    </Alert.Heading>\n\n                </>\n            )}\n            </Alert>\n        </>\n    )\n\n    if (!token) {\n        return (<Button variant='primary' size='lg' style={{width: 450}} onClick={() => {handlerGitHubLogin()}}>Login With GitHub</Button>)\n    } else if (token && !created){\n        return (\n            <>\n                <input value={repoName} onChange={(e) => {setRepoName(e.target.value)}}></input>\n                <Button variant='primary' size='lg' style={{width: 450}} onClick={() => {createRepo()}}>Create Repo</Button>\n            </>\n        )\n    } else {\n        return (\n        <>\n            <h1>{repoName} was created successfully. You can close this window and resume the CLI.</h1>\n        </>\n        )\n    }\n}\n\nexport default Home\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/home'\n\nfunction App() {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Switch>\n                <Route>\n                    <Home/>\n                </Route>\n\t\t\t</Switch>\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}